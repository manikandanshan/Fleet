<?xml version="1.0" encoding="UTF-8" ?>
<testsuite failures="7" time="11.123" errors="0" skipped="220" tests="238" name="TestSuite">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/local/java/jdk1.7.0_45/jre/lib/amd64"/>
    <property name="java.vm.version" value="24.45-b08"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="IN"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/gits/Documents/ManiProject/AssetManagementPlatform"/>
    <property name="java.runtime.version" value="1.7.0_45-b18"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/local/java/jdk1.7.0_45/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/home/gits/workspace/.metadata/.plugins/org.eclipse.m2e.launching/launches/m2conf7099064540637140913.tmp"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="51.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="3.19.0-65-generic"/>
    <property name="user.home" value="/home/gits"/>
    <property name="user.timezone" value="Asia/Kolkata"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.specification.version" value="1.7"/>
    <property name="user.name" value="gits"/>
    <property name="java.class.path" value="/home/gits/Downloads/eclipse/configuration/org.eclipse.osgi/bundles/840/1/.cp/jars/plexus-classworlds-2.4.jar"/>
    <property name="java.vm.specification.version" value="1.7"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/local/java/jdk1.7.0_45/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher -B install"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.7.0_45"/>
    <property name="java.ext.dirs" value="/usr/local/java/jdk1.7.0_45/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/local/java/jdk1.7.0_45/jre/lib/resources.jar:/usr/local/java/jdk1.7.0_45/jre/lib/rt.jar:/usr/local/java/jdk1.7.0_45/jre/lib/sunrsasign.jar:/usr/local/java/jdk1.7.0_45/jre/lib/jsse.jar:/usr/local/java/jdk1.7.0_45/jre/lib/jce.jar:/usr/local/java/jdk1.7.0_45/jre/lib/charsets.jar:/usr/local/java/jdk1.7.0_45/jre/lib/jfr.jar:/usr/local/java/jdk1.7.0_45/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/home/gits/Documents/ManiProject/AssetManagementPlatform/EMBEDDED"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="maven.bootclasspath" value="/home/gits/Downloads/eclipse/configuration/org.eclipse.osgi/bundles/840/1/.cp/jars/plexus-classworlds-2.4.jar"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.desktop" value="gnome"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase time="0.029" classname="com.fleet.controller.AppControllerTest" name="deleteEmployee">
    <failure type="java.lang.NullPointerException">java.lang.NullPointerException
	at com.fleet.controller.AppController.deleteEmployee(AppController.java:165)
	at com.fleet.controller.AppControllerTest.deleteEmployee(AppControllerTest.java:134)
</failure>
    <system-err>log4j:WARN No such property [datePattern] in org.apache.log4j.RollingFileAppender.
log4j:ERROR setFile(null,true) call failed.
java.io.FileNotFoundException: /logs/FleetManagemnt/fleet_log.log (No such file or directory)
	at java.io.FileOutputStream.open(Native Method)
	at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:221)
	at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:142)
	at org.apache.log4j.FileAppender.setFile(FileAppender.java:294)
	at org.apache.log4j.RollingFileAppender.setFile(RollingFileAppender.java:207)
	at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165)
	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104)
	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:809)
	at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:735)
	at org.apache.log4j.PropertyConfigurator.configureRootCategory(PropertyConfigurator.java:615)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:502)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:547)
	at org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:483)
	at org.apache.log4j.LogManager.&lt;clinit&gt;(LogManager.java:127)
	at org.slf4j.impl.Log4jLoggerFactory.getLogger(Log4jLoggerFactory.java:64)
	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:242)
	at org.apache.commons.logging.impl.SLF4JLogFactory.getInstance(SLF4JLogFactory.java:156)
	at org.apache.commons.logging.impl.SLF4JLogFactory.getInstance(SLF4JLogFactory.java:132)
	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:655)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.&lt;init&gt;(AbstractTestNGSpringContextTests.java:93)
	at org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests.&lt;init&gt;(AbstractTransactionalTestNGSpringContextTests.java:81)
	at com.fleet.dao.EntityDaoImplTest.&lt;init&gt;(EntityDaoImplTest.java:18)
	at com.fleet.dao.ServiceStationDaoImplTest.&lt;init&gt;(ServiceStationDaoImplTest.java:15)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
	at org.testng.internal.ObjectFactoryImpl.newInstance(ObjectFactoryImpl.java:29)
	at org.testng.internal.ClassHelper.createInstance1(ClassHelper.java:389)
	at org.testng.internal.ClassHelper.createInstance(ClassHelper.java:302)
	at org.testng.internal.ClassImpl.getDefaultInstance(ClassImpl.java:118)
	at org.testng.internal.ClassImpl.getInstances(ClassImpl.java:183)
	at org.testng.internal.TestNGClassFinder.&lt;init&gt;(TestNGClassFinder.java:128)
	at org.testng.TestRunner.initMethods(TestRunner.java:413)
	at org.testng.TestRunner.init(TestRunner.java:239)
	at org.testng.TestRunner.init(TestRunner.java:209)
	at org.testng.TestRunner.&lt;init&gt;(TestRunner.java:157)
	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:546)
	at org.testng.SuiteRunner.init(SuiteRunner.java:159)
	at org.testng.SuiteRunner.&lt;init&gt;(SuiteRunner.java:113)
	at org.testng.TestNG.createSuiteRunner(TestNG.java:1274)
	at org.testng.TestNG.createSuiteRunners(TestNG.java:1261)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1115)
	at org.testng.TestNG.run(TestNG.java:1032)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
</system-err>
  </testcase>
  <testcase time="0" classname="com.fleet.controller.AppControllerTest" name="editEmployee">
    <failure type="java.lang.NullPointerException">java.lang.NullPointerException
	at com.fleet.controller.AppController.editEmployee(AppController.java:127)
	at com.fleet.controller.AppControllerTest.editEmployee(AppControllerTest.java:101)
</failure>
  </testcase>
  <testcase time="0" classname="com.fleet.controller.AppControllerTest" name="listEmployees">
    <failure message="
Invalid use of argument matchers!
0 matchers expected, 1 recorded:
-&gt; at com.fleet.controller.AppControllerTest.editEmployee(AppControllerTest.java:101)

This exception may occur if matchers are combined with raw values:
    //incorrect:
    someMethod(anyObject(), &quot;raw String&quot;);
When using matchers, all arguments have to be provided by matchers.
For example:
    //correct:
    someMethod(anyObject(), eq(&quot;String by matcher&quot;));

For more info see javadoc for Matchers class.
" type="org.mockito.exceptions.misusing.InvalidUseOfMatchersException">org.mockito.exceptions.misusing.InvalidUseOfMatchersException: 
Invalid use of argument matchers!
0 matchers expected, 1 recorded:
-&gt; at com.fleet.controller.AppControllerTest.editEmployee(AppControllerTest.java:101)
This exception may occur if matchers are combined with raw values:
    //incorrect:
    someMethod(anyObject(), &quot;raw String&quot;);
When using matchers, all arguments have to be provided by matchers.
For example:
    //correct:
    someMethod(anyObject(), eq(&quot;String by matcher&quot;));
For more info see javadoc for Matchers class.
	at com.fleet.controller.AppControllerTest.listEmployees(AppControllerTest.java:58)
</failure>
  </testcase>
  <testcase time="0.035" classname="com.fleet.controller.AppControllerTest" name="newEmployee">
    <failure type="java.lang.NullPointerException">java.lang.NullPointerException
	at com.fleet.controller.AppController.getPrincipal(AppController.java:252)
	at com.fleet.controller.AppController.newEmployee(AppController.java:87)
	at com.fleet.controller.AppControllerTest.newEmployee(AppControllerTest.java:66)
</failure>
  </testcase>
  <testcase time="0.005" classname="com.fleet.controller.AppControllerTest" name="saveEmployeeWithSuccess">
    <failure message="expected [Employee Axel registered successfully] but found [null]" type="java.lang.AssertionError">java.lang.AssertionError: expected [Employee Axel registered successfully] but found [null]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:167)
	at com.fleet.controller.AppControllerTest.saveEmployeeWithSuccess(AppControllerTest.java:94)
</failure>
  </testcase>
  <testcase time="0.001" classname="com.fleet.controller.AppControllerTest" name="saveEmployeeWithValidationError"/>
  <testcase time="0" classname="com.fleet.controller.AppControllerTest" name="saveEmployeeWithValidationErrorNonUniqueSSN"/>
  <testcase time="0" classname="com.fleet.controller.AppControllerTest" name="updateEmployeeWithSuccess">
    <failure message="expected [Employee Axel updated successfully] but found [null]" type="java.lang.AssertionError">java.lang.AssertionError: expected [Employee Axel updated successfully] but found [null]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:167)
	at com.fleet.controller.AppControllerTest.updateEmployeeWithSuccess(AppControllerTest.java:127)
</failure>
  </testcase>
  <testcase time="0" classname="com.fleet.controller.AppControllerTest" name="updateEmployeeWithValidationError"/>
  <testcase time="0" classname="com.fleet.controller.AppControllerTest" name="updateEmployeeWithValidationErrorNonUniqueSSN"/>
  <testcase time="7.93" classname="com.fleet.dao.AssociateDaoImplTest" name="setUp">
    <failure message="NULL not allowed for column &quot;ASSOCIATE_TYPE_ID&quot;; SQL statement:
insert into FM_ASSOCIATE (ID, NUMBER, FIRST_NAME, LAST_NAME, PHONE_NO, MOBILE_NO, EMAIL, DOB, LICENCE_NO, LICENCE_VALID_UPTO, CLIENT_ID, ADDRESS, NOTES, STATUS, CREATED_ON, MODIFIED_ON) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) [23502-187]" type="org.h2.jdbc.JdbcSQLException">org.h2.jdbc.JdbcSQLException: NULL not allowed for column &quot;ASSOCIATE_TYPE_ID&quot;; SQL statement:
insert into FM_ASSOCIATE (ID, NUMBER, FIRST_NAME, LAST_NAME, PHONE_NO, MOBILE_NO, EMAIL, DOB, LICENCE_NO, LICENCE_VALID_UPTO, CLIENT_ID, ADDRESS, NOTES, STATUS, CREATED_ON, MODIFIED_ON) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) [23502-187]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:303)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:737)
	at org.h2.command.dml.Insert.insertRows(Insert.java:151)
	at org.h2.command.dml.Insert.update(Insert.java:114)
	at org.h2.command.CommandContainer.update(CommandContainer.java:78)
	at org.h2.command.Command.executeUpdate(Command.java:254)
	at org.h2.jdbc.JdbcPreparedStatement.execute(JdbcPreparedStatement.java:198)
	at org.dbunit.database.statement.SimplePreparedStatement.addBatch(SimplePreparedStatement.java:67)
	at org.dbunit.database.statement.AutomaticPreparedBatchStatement.addBatch(AutomaticPreparedBatchStatement.java:57)
	at org.dbunit.operation.AbstractBatchOperation.execute(AbstractBatchOperation.java:187)
	at org.dbunit.operation.CompositeOperation.execute(CompositeOperation.java:67)
	at com.fleet.dao.EntityDaoImplTest.setUp(EntityDaoImplTest.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:517)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:601)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:845)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1153)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:771)
	at org.testng.TestRunner.run(TestRunner.java:621)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
	at org.testng.SuiteRunner.run(SuiteRunner.java:259)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1124)
	at org.testng.TestNG.run(TestNG.java:1032)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
</failure>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.AssociateDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.01" classname="com.fleet.dao.AssociateDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.01" classname="com.fleet.dao.AssociateDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.AssociateDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.AssociateDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.AssociateDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.AssociateDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.AssociateDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.AssociateDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.AssociateDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.AssociateDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.AssociateDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.AssociateDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ClientDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ClientDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ClientDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ClientDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ClientDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ClientDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ClientDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ClientDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ClientDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.EmployeeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.EmployeeDaoImplTest" name="deleteEmployeeByInvalidSsn">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.EmployeeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.EmployeeDaoImplTest" name="deleteEmployeeBySsn">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.EmployeeDaoImplTest" name="findAllEmployees">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="findById">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.003" classname="com.fleet.dao.EmployeeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.EmployeeDaoImplTest" name="findEmployeeBySsn">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.EmployeeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.EmployeeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.EmployeeDaoImplTest" name="saveEmployee">
    <skipped/>
  </testcase>
  <testcase time="0.007" classname="com.fleet.service.EmployeeServiceImplTest" name="deleteEmployeeBySsn"/>
  <testcase time="0" classname="com.fleet.service.EmployeeServiceImplTest" name="findAllEmployees"/>
  <testcase time="0.001" classname="com.fleet.service.EmployeeServiceImplTest" name="findById"/>
  <testcase time="0.001" classname="com.fleet.service.EmployeeServiceImplTest" name="findEmployeeBySsn"/>
  <testcase time="0.001" classname="com.fleet.service.EmployeeServiceImplTest" name="isEmployeeSsnUnique"/>
  <testcase time="0.001" classname="com.fleet.service.EmployeeServiceImplTest" name="saveEmployee"/>
  <testcase time="0.001" classname="com.fleet.service.EmployeeServiceImplTest" name="updateEmployee"/>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.FeatureDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.FeatureDaoImplTest" name="deleteFeature">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.FeatureDaoImplTest" name="deleteFeatureByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.FeatureDaoImplTest" name="findAllFeatures">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.FeatureDaoImplTest" name="findById">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.FeatureDaoImplTest" name="findFeatureByName">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.FeatureDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.FeatureDaoImplTest" name="saveFeature">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.PrivilegeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.PrivilegeDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.PrivilegeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.PrivilegeDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.PrivilegeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.PrivilegeDaoImplTest" name="findAllPrivilege">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.PrivilegeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.PrivilegeDaoImplTest" name="findById">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.PrivilegeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.PrivilegeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.PrivilegeDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.RoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.RoleDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.RoleDaoImplTest" name="deleteByInvalidCode">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.RoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.RoleDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.RoleDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.RoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.RoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.RoleDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceDetailDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceStationDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceStationDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceStationDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceStationDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceStationDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceStationDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.ServiceStationDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.ServiceStationDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.ServiceStationDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDetailDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDetailDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDetailDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDetailDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.TripDetailDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.TripDetailDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.TripDetailDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserDaoImplTest" name="deleteByInvalidCode">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserRoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserRoleDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserRoleDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserRoleDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserRoleDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserRoleDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserRoleDaoImplTest" name="save">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextBeforeTestClass">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextPrepareTestInstance">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserTypeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserTypeDaoImplTest" name="delete">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserTypeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserTypeDaoImplTest" name="deleteByInvalid">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserTypeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserTypeDaoImplTest" name="find">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserTypeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserTypeDaoImplTest" name="findAll">
    <skipped/>
  </testcase>
  <testcase time="0.001" classname="com.fleet.dao.UserTypeDaoImplTest" name="springTestContextBeforeTestMethod">
    <skipped/>
  </testcase>
  <testcase time="0.002" classname="com.fleet.dao.UserTypeDaoImplTest" name="setUp">
    <skipped/>
  </testcase>
  <testcase time="0" classname="com.fleet.dao.UserTypeDaoImplTest" name="save">
    <skipped/>
  </testcase>
</testsuite>